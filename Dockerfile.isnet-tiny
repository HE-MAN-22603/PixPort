# Railway-Optimized Dockerfile for ISNet Tiny Background Removal Service
# Target: 512MB memory limit with <200MB runtime usage

FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Set environment variables for Railway
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH=/app
ENV PORT=8080
ENV FLASK_APP=app_isnet_tiny.py
ENV UPLOAD_FOLDER=/tmp/uploads
ENV PROCESSED_FOLDER=/tmp/processed

# Install system dependencies (minimal)
RUN apt-get update && apt-get install -y \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copy requirements first for better Docker caching
COPY requirements-isnet-tiny.txt .

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements-isnet-tiny.txt

# Copy application code
COPY app_isnet_tiny.py .
COPY app/ ./app/

# Create necessary directories
RUN mkdir -p /tmp/uploads /tmp/processed && \
    chmod 755 /tmp/uploads /tmp/processed

# Pre-download the ISNet tiny model to reduce startup time
# This will be cached in the Docker image
RUN python -c "
try:
    from rembg import new_session
    print('Pre-downloading isnet-general-tiny model...')
    session = new_session('isnet-general-use')
    print('Model pre-downloaded successfully')
except Exception as e:
    print(f'Pre-download failed (will download at runtime): {e}')
"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:$PORT/api/bg/health || exit 1

# Expose port
EXPOSE 8080

# Run the application
CMD ["python", "app_isnet_tiny.py"]
