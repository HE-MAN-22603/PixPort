# ========================================
# ðŸš„ PIXPORT - RAILWAY DEPLOYMENT REQUIREMENTS
# ========================================
# Memory-optimized for Railway's 512MB limit
# Uses ONLY u2netp model (~4.7MB) for background removal
# Python 3.11+ compatible

# ===== Core Web Framework =====
Flask>=2.3.3,<4.0.0
Flask-Limiter>=3.5.0
Werkzeug>=2.3.7
gunicorn>=21.2.0

# ===== Image Processing (Essential) =====
Pillow>=10.0.0,<11.0.0
numpy>=1.24.3,<1.26.0

# ===== Background Removal - Railway Optimized =====
# rembg with u2netp model support (smallest model ~4.7MB)
rembg>=2.0.60,<3.0.0

# ONNX Runtime CPU-only (no GPU dependencies for Railway)
onnxruntime>=1.15.1,<1.17.0

# ===== Computer Vision =====
# OpenCV headless version - essential for image processing
opencv-python-headless>=4.8.0.76,<4.9.0

# ===== System Utilities =====
psutil>=5.9.0,<6.0.0
requests>=2.28.0,<3.0.0
python-dotenv>=1.0.0,<2.0.0

# ===== Railway Memory Usage Estimates =====
# Flask + dependencies: ~25MB
# Pillow: ~15MB  
# NumPy: ~20MB
# ONNX Runtime (CPU): ~40MB
# OpenCV (headless): ~30MB
# rembg + u2netp model: ~25MB (including tiny model)
# Working memory: ~100MB
# Total estimated: ~255MB (50% of Railway's 512MB limit)

# ===== Railway Deployment Benefits =====
# 1. 512MB memory limit (sufficient for u2netp model)
# 2. Fast deployment and startup
# 3. Built-in scaling and load balancing
# 4. Free tier supports basic background removal
# 5. Simple environment variable configuration

# ===== Performance Notes =====
# - u2netp model loads in ~2-3 seconds
# - Background removal: ~1-5 seconds per image
# - Memory usage stays under 300MB typically
# - Supports images up to 8MB in size
# - Automatic garbage collection optimized
